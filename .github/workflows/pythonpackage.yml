name: Python package
on:
  push:
    tags:
        - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.5.4.post0)'
        required: true
        default: '0.5.4.post0'
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - test

jobs:
  prepare-sqlite:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set version for manual builds
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Setting version to ${{ github.event.inputs.version }}"
        # 这里可以添加修改版本号的逻辑
        # 比如更新 setup.py 和 pyproject.toml 中的版本号

    - if: steps.sqlite-amalgamation.outputs.cache-hit != 'true'
      run: |
        cd sqlcipher/
        LIBS="-lm" ./configure --disable-tcl --enable-tempstore=yes --enable-fts5 --enable-fts4 --enable-fts3 --enable-rtree
        make sqlite3.c

    - uses: actions/upload-artifact@v4
      with:
        name: sqlite-amalgamation
        path: |
          sqlcipher/sqlite3.c
          sqlcipher/sqlite3.h

  build-sdist:
    needs: prepare-sqlite
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: actions/setup-python@v5
      with:
        python-version: 3.8

    - uses: actions/download-artifact@v4
      with:
        name: sqlite-amalgamation
        path: ./src/sqlcipher

    - name: Build sdist
      run: |
        # 清理之前的构建
        rm -rf dist/ build/ *.egg-info/
        # 显示当前包名配置
        echo "Current package name in setup.py:"
        grep -n "name=" setup.py
        echo "Current package name in pyproject.toml:"
        grep -n "name = " pyproject.toml
        # 构建 sdist
        pipx run build --sdist
    
    - name: Debug - List dist directory
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Looking for sdist files:"
        find dist/ -name "*.tar.gz" -o -name "*.whl"
        echo "Full file listing:"
        find dist/ -type f
    
    - name: Test sdist
      run: |
        # 找到实际的 sdist 文件
        SDIST_FILE=$(find dist/ -name "*.tar.gz" | head -1)
        if [ -z "$SDIST_FILE" ]; then
          echo "No .tar.gz file found in dist/"
          exit 1
        fi
        echo "Installing sdist file: $SDIST_FILE"
        python -m pip install "$SDIST_FILE"
        mv sqlcipher3 sqlcipher3_ &&
        mv sqlcipher3_ sqlcipher3

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  build-wheels:
    needs: prepare-sqlite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 (64位)
          - os: ubuntu-latest
            cibw_archs: x86_64
            cibw_build: "cp*-manylinux_*"
            compile_target: x86_64
            out: x86_64-manylinux
          # Linux x86 (32位)
          - os: ubuntu-latest
            cibw_archs: i686
            cibw_build: "cp*-manylinux_*"
            compile_target: x86
            out: x86-manylinux
          # Linux ARM64 (64位)
          - os: ubuntu-24.04-arm
            cibw_archs: aarch64
            cibw_build: "cp*-manylinux_*"
            compile_target: armv8
            out: armv8-manylinux
          # Windows x64 (64位)
          - os: windows-latest
            cibw_archs: AMD64
            cibw_build: "cp*"
            compile_target: x86_64
            out: x86_64-windows
          # Windows x86 (32位)
          - os: windows-latest
            cibw_archs: x86
            cibw_build: "cp*"
            compile_target: x86
            out: x86-windows
          # Windows ARM64 (64位)
          - os: windows-latest
            cibw_archs: ARM64
            cibw_build: "cp*"
            compile_target: armv8
            out: armv8-windows

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
        # This should be temporary
        # xref https://github.com/docker/setup-qemu-action/issues/188
        # xref https://github.com/tonistiigi/binfmt/issues/215
        image: tonistiigi/binfmt:qemu-v8.1.5

    - uses: actions/download-artifact@v4
      with:
        name: sqlite-amalgamation
        path: ./src/sqlcipher

    - name: Build wheels for ${{ matrix.os }} ${{ matrix.cibw_archs }} ${{ matrix.cibw_build }}
      uses: pypa/cibuildwheel@v2.23.2
      env:
        CIBW_BUILD_FRONTEND: build
        CIBW_BUILD: ${{ matrix.cibw_build }}
        CIBW_ARCHS: ${{ matrix.cibw_archs }}
        CIBW_ENVIRONMENT: SQLCIPHER3_COMPILE_TARGET=${{ matrix.compile_target }}
        CIBW_TEST_COMMAND: >
          mv {project}/sqlcipher3 {project}/sqlcipher3_ &&
          python {project}/tests/ &&
          mv {project}/sqlcipher3_ {project}/sqlcipher3

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.out }}
        path: ./wheelhouse/*.whl

  upload-pypi:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          merge-multiple: true
          path: dist

      - name: Publish to Private PyPI
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine
          python -m twine upload --repository-url https://yggsoft-pypi.pkg.coding.net/ygga6/a6 dist/*
        env:
          TWINE_USERNAME: ${{ secrets.CODING_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.CODING_PYPI_PASSWORD }}
